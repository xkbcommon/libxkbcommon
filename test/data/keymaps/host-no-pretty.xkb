xkb_keymap {
xkb_keycodes "evdev_aliases(qwerty)" {
	minimum = 8;
	maximum = 255;
	<ESC> = 9;
	<AE01> = 10;
	<AE02> = 11;
	<AE03> = 12;
	<AE04> = 13;
	<AE05> = 14;
	<AE06> = 15;
	<AE07> = 16;
	<AE08> = 17;
	<AE09> = 18;
	<AE10> = 19;
	<AE11> = 20;
	<AE12> = 21;
	<BKSP> = 22;
	<TAB> = 23;
	<AD01> = 24;
	<AD02> = 25;
	<AD03> = 26;
	<AD04> = 27;
	<AD05> = 28;
	<AD06> = 29;
	<AD07> = 30;
	<AD08> = 31;
	<AD09> = 32;
	<AD10> = 33;
	<AD11> = 34;
	<AD12> = 35;
	<RTRN> = 36;
	<LCTL> = 37;
	<AC01> = 38;
	<AC02> = 39;
	<AC03> = 40;
	<AC04> = 41;
	<AC05> = 42;
	<AC06> = 43;
	<AC07> = 44;
	<AC08> = 45;
	<AC09> = 46;
	<AC10> = 47;
	<AC11> = 48;
	<TLDE> = 49;
	<LFSH> = 50;
	<BKSL> = 51;
	<AB01> = 52;
	<AB02> = 53;
	<AB03> = 54;
	<AB04> = 55;
	<AB05> = 56;
	<AB06> = 57;
	<AB07> = 58;
	<AB08> = 59;
	<AB09> = 60;
	<AB10> = 61;
	<RTSH> = 62;
	<KPMU> = 63;
	<LALT> = 64;
	<SPCE> = 65;
	<CAPS> = 66;
	<FK01> = 67;
	<FK02> = 68;
	<FK03> = 69;
	<FK04> = 70;
	<FK05> = 71;
	<FK06> = 72;
	<FK07> = 73;
	<FK08> = 74;
	<FK09> = 75;
	<FK10> = 76;
	<NMLK> = 77;
	<SCLK> = 78;
	<KP7> = 79;
	<KP8> = 80;
	<KP9> = 81;
	<KPSU> = 82;
	<KP4> = 83;
	<KP5> = 84;
	<KP6> = 85;
	<KPAD> = 86;
	<KP1> = 87;
	<KP2> = 88;
	<KP3> = 89;
	<KP0> = 90;
	<KPDL> = 91;
	<LVL3> = 92;
	<LSGT> = 94;
	<FK11> = 95;
	<FK12> = 96;
	<AB11> = 97;
	<KATA> = 98;
	<HIRA> = 99;
	<HENK> = 100;
	<HKTG> = 101;
	<MUHE> = 102;
	<JPCM> = 103;
	<KPEN> = 104;
	<RCTL> = 105;
	<KPDV> = 106;
	<PRSC> = 107;
	<RALT> = 108;
	<LNFD> = 109;
	<HOME> = 110;
	<UP> = 111;
	<PGUP> = 112;
	<LEFT> = 113;
	<RGHT> = 114;
	<END> = 115;
	<DOWN> = 116;
	<PGDN> = 117;
	<INS> = 118;
	<DELE> = 119;
	<I120> = 120;
	<MUTE> = 121;
	<VOL-> = 122;
	<VOL+> = 123;
	<POWR> = 124;
	<KPEQ> = 125;
	<I126> = 126;
	<PAUS> = 127;
	<I128> = 128;
	<I129> = 129;
	<HNGL> = 130;
	<HJCV> = 131;
	<AE13> = 132;
	<LWIN> = 133;
	<RWIN> = 134;
	<COMP> = 135;
	<STOP> = 136;
	<AGAI> = 137;
	<PROP> = 138;
	<UNDO> = 139;
	<FRNT> = 140;
	<COPY> = 141;
	<OPEN> = 142;
	<PAST> = 143;
	<FIND> = 144;
	<CUT> = 145;
	<HELP> = 146;
	<I147> = 147;
	<I148> = 148;
	<I149> = 149;
	<I150> = 150;
	<I151> = 151;
	<I152> = 152;
	<I153> = 153;
	<I154> = 154;
	<I155> = 155;
	<I156> = 156;
	<I157> = 157;
	<I158> = 158;
	<I159> = 159;
	<I160> = 160;
	<I161> = 161;
	<I162> = 162;
	<I163> = 163;
	<I164> = 164;
	<I165> = 165;
	<I166> = 166;
	<I167> = 167;
	<I168> = 168;
	<I169> = 169;
	<I170> = 170;
	<I171> = 171;
	<I172> = 172;
	<I173> = 173;
	<I174> = 174;
	<I175> = 175;
	<I176> = 176;
	<I177> = 177;
	<I178> = 178;
	<I179> = 179;
	<I180> = 180;
	<I181> = 181;
	<I182> = 182;
	<I183> = 183;
	<I184> = 184;
	<I185> = 185;
	<I186> = 186;
	<I187> = 187;
	<I188> = 188;
	<I189> = 189;
	<I190> = 190;
	<FK13> = 191;
	<FK14> = 192;
	<FK15> = 193;
	<FK16> = 194;
	<FK17> = 195;
	<FK18> = 196;
	<FK19> = 197;
	<FK20> = 198;
	<FK21> = 199;
	<FK22> = 200;
	<FK23> = 201;
	<FK24> = 202;
	<MDSW> = 203;
	<ALT> = 204;
	<META> = 205;
	<SUPR> = 206;
	<HYPR> = 207;
	<I208> = 208;
	<I209> = 209;
	<I210> = 210;
	<I211> = 211;
	<I212> = 212;
	<I213> = 213;
	<I214> = 214;
	<I215> = 215;
	<I216> = 216;
	<I217> = 217;
	<I218> = 218;
	<I219> = 219;
	<I220> = 220;
	<I221> = 221;
	<I222> = 222;
	<I223> = 223;
	<I224> = 224;
	<I225> = 225;
	<I226> = 226;
	<I227> = 227;
	<I228> = 228;
	<I229> = 229;
	<I230> = 230;
	<I231> = 231;
	<I232> = 232;
	<I233> = 233;
	<I234> = 234;
	<I235> = 235;
	<I236> = 236;
	<I237> = 237;
	<I238> = 238;
	<I239> = 239;
	<I240> = 240;
	<I241> = 241;
	<I242> = 242;
	<I243> = 243;
	<I244> = 244;
	<I245> = 245;
	<I246> = 246;
	<I247> = 247;
	<I248> = 248;
	<I249> = 249;
	<I250> = 250;
	<I251> = 251;
	<I252> = 252;
	<I253> = 253;
	indicator 1 = "Caps Lock";
	indicator 2 = "Num Lock";
	indicator 3 = "Scroll Lock";
	indicator 4 = "Compose";
	indicator 5 = "Kana";
	indicator 6 = "Sleep";
	indicator 7 = "Suspend";
	indicator 8 = "Mute";
	indicator 9 = "Misc";
	indicator 10 = "Mail";
	indicator 11 = "Charging";
	indicator 12 = "Shift Lock";
	indicator 13 = "Group 2";
	indicator 14 = "Mouse Keys";
	alias <AC12> = <BKSL>;
	alias <MENU> = <COMP>;
	alias <HZTG> = <TLDE>;
	alias <LMTA> = <LWIN>;
	alias <RMTA> = <RWIN>;
	alias <ALGR> = <RALT>;
	alias <KPPT> = <I129>;
	alias <LatQ> = <AD01>;
	alias <LatW> = <AD02>;
	alias <LatE> = <AD03>;
	alias <LatR> = <AD04>;
	alias <LatT> = <AD05>;
	alias <LatY> = <AD06>;
	alias <LatU> = <AD07>;
	alias <LatI> = <AD08>;
	alias <LatO> = <AD09>;
	alias <LatP> = <AD10>;
	alias <LatA> = <AC01>;
	alias <LatS> = <AC02>;
	alias <LatD> = <AC03>;
	alias <LatF> = <AC04>;
	alias <LatG> = <AC05>;
	alias <LatH> = <AC06>;
	alias <LatJ> = <AC07>;
	alias <LatK> = <AC08>;
	alias <LatL> = <AC09>;
	alias <LatZ> = <AB01>;
	alias <LatX> = <AB02>;
	alias <LatC> = <AB03>;
	alias <LatV> = <AB04>;
	alias <LatB> = <AB05>;
	alias <LatN> = <AB06>;
	alias <LatM> = <AB07>;
};

xkb_types "complete" {
	virtual_modifiers NumLock,Alt,LevelThree,LAlt,RAlt,RControl,LControl,ScrollLock,LevelFive,AltGr,Meta,Super,Hyper;

	type "ONE_LEVEL" {
		modifiers= none;
		level_name[1]= "Any";
	};
	type "TWO_LEVEL" {
		modifiers= Shift;
		map[Shift]= 2;
		level_name[1]= "Base";
		level_name[2]= "Shift";
	};
	type "ALPHABETIC" {
		modifiers= Shift+Lock;
		map[Shift]= 2;
		map[Lock]= 1;
		preserve[Lock]= Lock;
		level_name[1]= "Base";
		level_name[2]= "Caps";
	};
	type "KEYPAD" {
		modifiers= Shift+NumLock;
		map[Shift]= 2;
		map[NumLock]= 2;
		level_name[1]= "Base";
		level_name[2]= "Number";
	};
	type "SHIFT+ALT" {
		modifiers= Shift+Alt;
		map[Shift+Alt]= 2;
		level_name[1]= "Base";
		level_name[2]= "Shift+Alt";
	};
	type "PC_SUPER_LEVEL2" {
		modifiers= Mod4;
		map[Mod4]= 2;
		level_name[1]= "Base";
		level_name[2]= "Super";
	};
	type "PC_CONTROL_LEVEL2" {
		modifiers= Control;
		map[Control]= 2;
		level_name[1]= "Base";
		level_name[2]= "Control";
	};
	type "PC_LCONTROL_LEVEL2" {
		modifiers= LControl;
		map[LControl]= 2;
		level_name[1]= "Base";
		level_name[2]= "LControl";
	};
	type "PC_RCONTROL_LEVEL2" {
		modifiers= RControl;
		map[RControl]= 2;
		level_name[1]= "Base";
		level_name[2]= "RControl";
	};
	type "PC_ALT_LEVEL2" {
		modifiers= Alt;
		map[Alt]= 2;
		level_name[1]= "Base";
		level_name[2]= "Alt";
	};
	type "PC_LALT_LEVEL2" {
		modifiers= LAlt;
		map[LAlt]= 2;
		level_name[1]= "Base";
		level_name[2]= "LAlt";
	};
	type "PC_RALT_LEVEL2" {
		modifiers= RAlt;
		map[RAlt]= 2;
		level_name[1]= "Base";
		level_name[2]= "RAlt";
	};
	type "CTRL+ALT" {
		modifiers= Shift+Control+Alt+LevelThree;
		map[Shift]= 2;
		preserve[Shift]= Shift;
		map[LevelThree]= 3;
		map[Shift+LevelThree]= 4;
		preserve[Shift+LevelThree]= Shift;
		map[Control+Alt]= 5;
		level_name[1]= "Base";
		level_name[2]= "Shift";
		level_name[3]= "Alt Base";
		level_name[4]= "Shift Alt";
		level_name[5]= "Ctrl+Alt";
	};
	type "LOCAL_EIGHT_LEVEL" {
		modifiers= Shift+Lock+Control+LevelThree;
		map[Shift]= 2;
		map[Lock]= 2;
		map[LevelThree]= 3;
		map[Shift+Lock+LevelThree]= 3;
		map[Shift+LevelThree]= 4;
		map[Lock+LevelThree]= 4;
		map[Control]= 5;
		map[Shift+Lock+Control]= 5;
		map[Shift+Control]= 6;
		map[Lock+Control]= 6;
		map[Control+LevelThree]= 7;
		map[Shift+Lock+Control+LevelThree]= 7;
		map[Shift+Control+LevelThree]= 8;
		map[Lock+Control+LevelThree]= 8;
		level_name[1]= "Base";
		level_name[2]= "Shift";
		level_name[3]= "3";
		level_name[4]= "Shift 3";
		level_name[5]= "Ctrl";
		level_name[6]= "Shift Ctrl";
		level_name[7]= "3 Ctrl";
		level_name[8]= "Shift 3 Ctrl";
	};
	type "THREE_LEVEL" {
		modifiers= Shift+LevelThree;
		map[Shift]= 2;
		map[LevelThree]= 3;
		map[Shift+LevelThree]= 3;
		level_name[1]= "Base";
		level_name[2]= "Shift";
		level_name[3]= "3";
	};
	type "EIGHT_LEVEL" {
		modifiers= Shift+LevelThree+LevelFive;
		map[Shift]= 2;
		map[LevelThree]= 3;
		map[Shift+LevelThree]= 4;
		map[LevelFive]= 5;
		map[Shift+LevelFive]= 6;
		map[LevelThree+LevelFive]= 7;
		map[Shift+LevelThree+LevelFive]= 8;
		level_name[1]= "Base";
		level_name[2]= "Shift";
		level_name[3]= "Alt Base";
		level_name[4]= "Shift Alt";
		level_name[5]= "X";
		level_name[6]= "X Shift";
		level_name[7]= "X Alt Base";
		level_name[8]= "X Shift Alt";
	};
	type "EIGHT_LEVEL_ALPHABETIC" {
		modifiers= Shift+Lock+LevelThree+LevelFive;
		map[Shift]= 2;
		map[Lock]= 2;
		map[LevelThree]= 3;
		map[Shift+LevelThree]= 4;
		map[Lock+LevelThree]= 4;
		map[Shift+Lock+LevelThree]= 3;
		map[LevelFive]= 5;
		map[Shift+LevelFive]= 6;
		map[Lock+LevelFive]= 6;
		map[LevelThree+LevelFive]= 7;
		map[Shift+LevelThree+LevelFive]= 8;
		map[Lock+LevelThree+LevelFive]= 8;
		map[Shift+Lock+LevelThree+LevelFive]= 7;
		level_name[1]= "Base";
		level_name[2]= "Shift";
		level_name[3]= "Alt Base";
		level_name[4]= "Shift Alt";
		level_name[5]= "X";
		level_name[6]= "X Shift";
		level_name[7]= "X Alt Base";
		level_name[8]= "X Shift Alt";
	};
	type "EIGHT_LEVEL_SEMIALPHABETIC" {
		modifiers= Shift+Lock+LevelThree+LevelFive;
		map[Shift]= 2;
		map[Lock]= 2;
		map[LevelThree]= 3;
		map[Shift+LevelThree]= 4;
		map[Lock+LevelThree]= 3;
		preserve[Lock+LevelThree]= Lock;
		map[Shift+Lock+LevelThree]= 4;
		preserve[Shift+Lock+LevelThree]= Lock;
		map[LevelFive]= 5;
		map[Shift+LevelFive]= 6;
		map[Lock+LevelFive]= 6;
		preserve[Lock+LevelFive]= Lock;
		map[Shift+Lock+LevelFive]= 6;
		preserve[Shift+Lock+LevelFive]= Lock;
		map[LevelThree+LevelFive]= 7;
		map[Shift+LevelThree+LevelFive]= 8;
		map[Lock+LevelThree+LevelFive]= 7;
		preserve[Lock+LevelThree+LevelFive]= Lock;
		map[Shift+Lock+LevelThree+LevelFive]= 8;
		preserve[Shift+Lock+LevelThree+LevelFive]= Lock;
		level_name[1]= "Base";
		level_name[2]= "Shift";
		level_name[3]= "Alt Base";
		level_name[4]= "Shift Alt";
		level_name[5]= "X";
		level_name[6]= "X Shift";
		level_name[7]= "X Alt Base";
		level_name[8]= "X Shift Alt";
	};
	type "FOUR_LEVEL" {
		modifiers= Shift+LevelThree;
		map[Shift]= 2;
		map[LevelThree]= 3;
		map[Shift+LevelThree]= 4;
		level_name[1]= "Base";
		level_name[2]= "Shift";
		level_name[3]= "Alt Base";
		level_name[4]= "Shift Alt";
	};
	type "FOUR_LEVEL_ALPHABETIC" {
		modifiers= Shift+Lock+LevelThree;
		map[Shift]= 2;
		map[Lock]= 2;
		map[LevelThree]= 3;
		map[Shift+LevelThree]= 4;
		map[Lock+LevelThree]= 4;
		map[Shift+Lock+LevelThree]= 3;
		level_name[1]= "Base";
		level_name[2]= "Shift";
		level_name[3]= "Alt Base";
		level_name[4]= "Shift Alt";
	};
	type "FOUR_LEVEL_SEMIALPHABETIC" {
		modifiers= Shift+Lock+LevelThree;
		map[Shift]= 2;
		map[Lock]= 2;
		map[LevelThree]= 3;
		map[Shift+LevelThree]= 4;
		map[Lock+LevelThree]= 3;
		preserve[Lock+LevelThree]= Lock;
		map[Shift+Lock+LevelThree]= 4;
		preserve[Shift+Lock+LevelThree]= Lock;
		level_name[1]= "Base";
		level_name[2]= "Shift";
		level_name[3]= "Alt Base";
		level_name[4]= "Shift Alt";
	};
	type "FOUR_LEVEL_MIXED_KEYPAD" {
		modifiers= Shift+NumLock+LevelThree;
		map[NumLock]= 2;
		map[Shift]= 2;
		map[LevelThree]= 3;
		map[NumLock+LevelThree]= 3;
		map[Shift+LevelThree]= 4;
		map[Shift+NumLock+LevelThree]= 4;
		level_name[1]= "Base";
		level_name[2]= "Number";
		level_name[3]= "Alt Base";
		level_name[4]= "Shift Alt";
	};
	type "FOUR_LEVEL_X" {
		modifiers= Shift+Control+Alt+LevelThree;
		map[LevelThree]= 2;
		map[Shift+LevelThree]= 3;
		map[Control+Alt]= 4;
		level_name[1]= "Base";
		level_name[2]= "Alt Base";
		level_name[3]= "Shift Alt";
		level_name[4]= "Ctrl+Alt";
	};
	type "SEPARATE_CAPS_AND_SHIFT_ALPHABETIC" {
		modifiers= Shift+Lock+LevelThree;
		map[Shift]= 2;
		map[Lock]= 4;
		preserve[Lock]= Lock;
		map[LevelThree]= 3;
		map[Shift+LevelThree]= 4;
		map[Lock+LevelThree]= 3;
		preserve[Lock+LevelThree]= Lock;
		map[Shift+Lock+LevelThree]= 3;
		level_name[1]= "Base";
		level_name[2]= "Shift";
		level_name[3]= "AltGr Base";
		level_name[4]= "Shift AltGr";
	};
	type "FOUR_LEVEL_PLUS_LOCK" {
		modifiers= Shift+Lock+LevelThree;
		map[Shift]= 2;
		map[LevelThree]= 3;
		map[Shift+LevelThree]= 4;
		map[Lock]= 5;
		map[Shift+Lock]= 2;
		map[Lock+LevelThree]= 3;
		map[Shift+Lock+LevelThree]= 4;
		level_name[1]= "Base";
		level_name[2]= "Shift";
		level_name[3]= "Alt Base";
		level_name[4]= "Shift Alt";
		level_name[5]= "Lock";
	};
	type "FOUR_LEVEL_KEYPAD" {
		modifiers= Shift+NumLock+LevelThree;
		map[Shift]= 2;
		map[NumLock]= 2;
		map[LevelThree]= 3;
		map[Shift+LevelThree]= 4;
		map[NumLock+LevelThree]= 4;
		map[Shift+NumLock+LevelThree]= 3;
		level_name[1]= "Base";
		level_name[2]= "Number";
		level_name[3]= "Alt Base";
		level_name[4]= "Alt Number";
	};
};

xkb_compatibility "complete" {
	virtual_modifiers NumLock,Alt,LevelThree,LAlt,RAlt,RControl,LControl,ScrollLock,LevelFive,AltGr,Meta,Super,Hyper;

	interpret.useModMapMods= AnyLevel;
	interpret.repeat= False;
	interpret 0xfe02+Exactly(Shift) {
		useModMapMods=level1;
		action= LatchMods(modifiers=Shift,clearLocks,latchToLock);
	};
	interpret 0xffe6+AnyOf(Shift+Lock) {
		action= LockMods(modifiers=Shift);
	};
	interpret 0xff7f+AnyOf(all) {
		virtualModifier= NumLock;
		action= LockMods(modifiers=NumLock);
	};
	interpret 0xfe03+AnyOf(all) {
		virtualModifier= LevelThree;
		useModMapMods=level1;
		action= SetMods(modifiers=LevelThree,clearLocks);
	};
	interpret 0xfe04+AnyOf(all) {
		virtualModifier= LevelThree;
		useModMapMods=level1;
		action= LatchMods(modifiers=LevelThree,clearLocks,latchToLock);
	};
	interpret 0xfe05+AnyOf(all) {
		virtualModifier= LevelThree;
		useModMapMods=level1;
		action= LockMods(modifiers=LevelThree);
	};
	interpret 0xffe9+AnyOf(all) {
		virtualModifier= Alt;
		action= SetMods(modifiers=modMapMods,clearLocks);
	};
	interpret 0xffea+AnyOf(all) {
		virtualModifier= Alt;
		action= SetMods(modifiers=modMapMods,clearLocks);
	};
	interpret 0xffe7+AnyOf(all) {
		virtualModifier= Meta;
		action= SetMods(modifiers=modMapMods,clearLocks);
	};
	interpret 0xffe8+AnyOf(all) {
		virtualModifier= Meta;
		action= SetMods(modifiers=modMapMods,clearLocks);
	};
	interpret 0xffeb+AnyOf(all) {
		virtualModifier= Super;
		action= SetMods(modifiers=modMapMods,clearLocks);
	};
	interpret 0xffec+AnyOf(all) {
		virtualModifier= Super;
		action= SetMods(modifiers=modMapMods,clearLocks);
	};
	interpret 0xffed+AnyOf(all) {
		virtualModifier= Hyper;
		action= SetMods(modifiers=modMapMods,clearLocks);
	};
	interpret 0xffee+AnyOf(all) {
		virtualModifier= Hyper;
		action= SetMods(modifiers=modMapMods,clearLocks);
	};
	interpret 0xff14+AnyOf(all) {
		virtualModifier= ScrollLock;
		action= LockMods(modifiers=modMapMods);
	};
	interpret 0xfe11+AnyOf(all) {
		virtualModifier= LevelFive;
		useModMapMods=level1;
		action= SetMods(modifiers=LevelFive,clearLocks);
	};
	interpret 0xfe12+AnyOf(all) {
		virtualModifier= LevelFive;
		useModMapMods=level1;
		action= LatchMods(modifiers=LevelFive,clearLocks,latchToLock);
	};
	interpret 0xfe13+AnyOf(all) {
		virtualModifier= LevelFive;
		useModMapMods=level1;
		action= LockMods(modifiers=LevelFive);
	};
	interpret 0xff7e+AnyOfOrNone(all) {
		virtualModifier= AltGr;
		useModMapMods=level1;
		action= SetGroup(group=+1);
	};
	interpret 0xfe03+AnyOfOrNone(all) {
		action= SetMods(modifiers=LevelThree,clearLocks);
	};
	interpret 0xfe04+AnyOfOrNone(all) {
		action= LatchMods(modifiers=LevelThree,clearLocks,latchToLock);
	};
	interpret 0xfe05+AnyOfOrNone(all) {
		action= LockMods(modifiers=LevelThree);
	};
	interpret 0xfe06+AnyOfOrNone(all) {
		virtualModifier= AltGr;
		useModMapMods=level1;
		action= LatchGroup(group=2);
	};
	interpret 0xfe08+AnyOfOrNone(all) {
		virtualModifier= AltGr;
		useModMapMods=level1;
		action= LockGroup(group=+1);
	};
	interpret 0xfe0a+AnyOfOrNone(all) {
		virtualModifier= AltGr;
		useModMapMods=level1;
		action= LockGroup(group=-1);
	};
	interpret 0xfe0c+AnyOfOrNone(all) {
		action= LockGroup(group=1);
	};
	interpret 0xfe0e+AnyOfOrNone(all) {
		action= LockGroup(group=2);
	};
	interpret 0xffb1+AnyOfOrNone(all) {
		repeat= True;
		action= MovePtr(x=-1,y=+1);
	};
	interpret 0xff9c+AnyOfOrNone(all) {
		repeat= True;
		action= MovePtr(x=-1,y=+1);
	};
	interpret 0xffb2+AnyOfOrNone(all) {
		repeat= True;
		action= MovePtr(x=+0,y=+1);
	};
	interpret 0xff99+AnyOfOrNone(all) {
		repeat= True;
		action= MovePtr(x=+0,y=+1);
	};
	interpret 0xffb3+AnyOfOrNone(all) {
		repeat= True;
		action= MovePtr(x=+1,y=+1);
	};
	interpret 0xff9b+AnyOfOrNone(all) {
		repeat= True;
		action= MovePtr(x=+1,y=+1);
	};
	interpret 0xffb4+AnyOfOrNone(all) {
		repeat= True;
		action= MovePtr(x=-1,y=+0);
	};
	interpret 0xff96+AnyOfOrNone(all) {
		repeat= True;
		action= MovePtr(x=-1,y=+0);
	};
	interpret 0xffb6+AnyOfOrNone(all) {
		repeat= True;
		action= MovePtr(x=+1,y=+0);
	};
	interpret 0xff98+AnyOfOrNone(all) {
		repeat= True;
		action= MovePtr(x=+1,y=+0);
	};
	interpret 0xffb7+AnyOfOrNone(all) {
		repeat= True;
		action= MovePtr(x=-1,y=-1);
	};
	interpret 0xff95+AnyOfOrNone(all) {
		repeat= True;
		action= MovePtr(x=-1,y=-1);
	};
	interpret 0xffb8+AnyOfOrNone(all) {
		repeat= True;
		action= MovePtr(x=+0,y=-1);
	};
	interpret 0xff97+AnyOfOrNone(all) {
		repeat= True;
		action= MovePtr(x=+0,y=-1);
	};
	interpret 0xffb9+AnyOfOrNone(all) {
		repeat= True;
		action= MovePtr(x=+1,y=-1);
	};
	interpret 0xff9a+AnyOfOrNone(all) {
		repeat= True;
		action= MovePtr(x=+1,y=-1);
	};
	interpret 0xffb5+AnyOfOrNone(all) {
		repeat= True;
		action= PtrBtn(button=default);
	};
	interpret 0xff9d+AnyOfOrNone(all) {
		repeat= True;
		action= PtrBtn(button=default);
	};
	interpret 0xff92+AnyOfOrNone(all) {
		repeat= True;
		action= SetPtrDflt(affect=button,button=1);
	};
	interpret 0xffaf+AnyOfOrNone(all) {
		repeat= True;
		action= SetPtrDflt(affect=button,button=1);
	};
	interpret 0xff93+AnyOfOrNone(all) {
		repeat= True;
		action= SetPtrDflt(affect=button,button=2);
	};
	interpret 0xffaa+AnyOfOrNone(all) {
		repeat= True;
		action= SetPtrDflt(affect=button,button=2);
	};
	interpret 0xff94+AnyOfOrNone(all) {
		repeat= True;
		action= SetPtrDflt(affect=button,button=3);
	};
	interpret 0xffad+AnyOfOrNone(all) {
		repeat= True;
		action= SetPtrDflt(affect=button,button=3);
	};
	interpret 0xffac+AnyOfOrNone(all) {
		repeat= True;
		action= PtrBtn(button=default,count=2);
	};
	interpret 0xffab+AnyOfOrNone(all) {
		repeat= True;
		action= PtrBtn(button=default,count=2);
	};
	interpret 0xffb0+AnyOfOrNone(all) {
		repeat= True;
		action= LockPtrBtn(button=default,affect=lock);
	};
	interpret 0xff9e+AnyOfOrNone(all) {
		repeat= True;
		action= LockPtrBtn(button=default,affect=lock);
	};
	interpret 0xffae+AnyOfOrNone(all) {
		repeat= True;
		action= LockPtrBtn(button=default,affect=unlock);
	};
	interpret 0xff9f+AnyOfOrNone(all) {
		repeat= True;
		action= LockPtrBtn(button=default,affect=unlock);
	};
	interpret 0xffd6+AnyOfOrNone(all) {
		repeat= True;
		action= SetPtrDflt(affect=button,button=1);
	};
	interpret 0xffd7+AnyOfOrNone(all) {
		repeat= True;
		action= SetPtrDflt(affect=button,button=2);
	};
	interpret 0xffd8+AnyOfOrNone(all) {
		repeat= True;
		action= MovePtr(x=-1,y=-1);
	};
	interpret 0xffda+AnyOfOrNone(all) {
		repeat= True;
		action= MovePtr(x=+1,y=-1);
	};
	interpret 0xffdc+AnyOfOrNone(all) {
		repeat= True;
		action= PtrBtn(button=default);
	};
	interpret 0xffde+AnyOfOrNone(all) {
		repeat= True;
		action= MovePtr(x=-1,y=+1);
	};
	interpret 0xffe0+AnyOfOrNone(all) {
		repeat= True;
		action= MovePtr(x=+1,y=+1);
	};
	interpret 0xfee8+AnyOfOrNone(all) {
		action= PtrBtn(button=default);
	};
	interpret 0xfee9+AnyOfOrNone(all) {
		action= PtrBtn(button=1);
	};
	interpret 0xfeea+AnyOfOrNone(all) {
		action= PtrBtn(button=2);
	};
	interpret 0xfeeb+AnyOfOrNone(all) {
		action= PtrBtn(button=3);
	};
	interpret 0xfeee+AnyOfOrNone(all) {
		action= PtrBtn(button=default,count=2);
	};
	interpret 0xfeef+AnyOfOrNone(all) {
		action= PtrBtn(button=1,count=2);
	};
	interpret 0xfef0+AnyOfOrNone(all) {
		action= PtrBtn(button=2,count=2);
	};
	interpret 0xfef1+AnyOfOrNone(all) {
		action= PtrBtn(button=3,count=2);
	};
	interpret 0xfef4+AnyOfOrNone(all) {
		action= LockPtrBtn(button=default,affect=both);
	};
	interpret 0xfef5+AnyOfOrNone(all) {
		action= LockPtrBtn(button=1,affect=both);
	};
	interpret 0xfef6+AnyOfOrNone(all) {
		action= LockPtrBtn(button=2,affect=both);
	};
	interpret 0xfef7+AnyOfOrNone(all) {
		action= LockPtrBtn(button=3,affect=both);
	};
	interpret 0xfef9+AnyOfOrNone(all) {
		action= LockControls(controls=MouseKeys);
	};
	interpret 0xfefa+AnyOfOrNone(all) {
		action= LockControls(controls=MouseKeysAccel);
	};
	interpret 0xfefb+AnyOfOrNone(all) {
		action= SetPtrDflt(affect=button,button=+1);
	};
	interpret 0xfefc+AnyOfOrNone(all) {
		action= SetPtrDflt(affect=button,button=-1);
	};
	interpret 0xfe70+AnyOfOrNone(all) {
		action= LockControls(controls=AccessXKeys);
	};
	interpret 0xfe71+AnyOfOrNone(all) {
		action= LockControls(controls=AccessXFeedback);
	};
	interpret 0xfe72+AnyOfOrNone(all) {
		action= LockControls(controls=RepeatKeys);
	};
	interpret 0xfe73+AnyOfOrNone(all) {
		action= LockControls(controls=SlowKeys);
	};
	interpret 0xfe74+AnyOfOrNone(all) {
		action= LockControls(controls=BounceKeys);
	};
	interpret 0xfe75+AnyOfOrNone(all) {
		action= LockControls(controls=StickyKeys);
	};
	interpret 0xfe76+AnyOfOrNone(all) {
		action= LockControls(controls=MouseKeys);
	};
	interpret 0xfe77+AnyOfOrNone(all) {
		action= LockControls(controls=MouseKeysAccel);
	};
	interpret 0xfe78+AnyOfOrNone(all) {
		action= LockControls(controls=none);
	};
	interpret 0xfe79+AnyOfOrNone(all) {
		action= LockControls(controls=none);
	};
	interpret 0xfe7a+AnyOfOrNone(all) {
		action= LockControls(controls=AudibleBell);
	};
	interpret 0xfed5+AnyOfOrNone(all) {
		action= Terminate();
	};
	interpret 0xffe9+AnyOfOrNone(all) {
		action= SetMods(modifiers=Alt,clearLocks);
	};
	interpret 0xffea+AnyOfOrNone(all) {
		action= SetMods(modifiers=Alt,clearLocks);
	};
	interpret 0xffe7+AnyOfOrNone(all) {
		action= SetMods(modifiers=Meta,clearLocks);
	};
	interpret 0xffe8+AnyOfOrNone(all) {
		action= SetMods(modifiers=Meta,clearLocks);
	};
	interpret 0xffeb+AnyOfOrNone(all) {
		action= SetMods(modifiers=Super,clearLocks);
	};
	interpret 0xffec+AnyOfOrNone(all) {
		action= SetMods(modifiers=Super,clearLocks);
	};
	interpret 0xffed+AnyOfOrNone(all) {
		action= SetMods(modifiers=Hyper,clearLocks);
	};
	interpret 0xffee+AnyOfOrNone(all) {
		action= SetMods(modifiers=Hyper,clearLocks);
	};
	interpret 0xffe1+AnyOfOrNone(all) {
		action= SetMods(modifiers=Shift,clearLocks);
	};
	interpret 0x1008fe01+AnyOfOrNone(all) {
		repeat= True;
		action= SwitchScreen(screen=1,!same);
	};
	interpret 0x1008fe02+AnyOfOrNone(all) {
		repeat= True;
		action= SwitchScreen(screen=2,!same);
	};
	interpret 0x1008fe03+AnyOfOrNone(all) {
		repeat= True;
		action= SwitchScreen(screen=3,!same);
	};
	interpret 0x1008fe04+AnyOfOrNone(all) {
		repeat= True;
		action= SwitchScreen(screen=4,!same);
	};
	interpret 0x1008fe05+AnyOfOrNone(all) {
		repeat= True;
		action= SwitchScreen(screen=5,!same);
	};
	interpret 0x1008fe06+AnyOfOrNone(all) {
		repeat= True;
		action= SwitchScreen(screen=6,!same);
	};
	interpret 0x1008fe07+AnyOfOrNone(all) {
		repeat= True;
		action= SwitchScreen(screen=7,!same);
	};
	interpret 0x1008fe08+AnyOfOrNone(all) {
		repeat= True;
		action= SwitchScreen(screen=8,!same);
	};
	interpret 0x1008fe09+AnyOfOrNone(all) {
		repeat= True;
		action= SwitchScreen(screen=9,!same);
	};
	interpret 0x1008fe0a+AnyOfOrNone(all) {
		repeat= True;
		action= SwitchScreen(screen=10,!same);
	};
	interpret 0x1008fe0b+AnyOfOrNone(all) {
		repeat= True;
		action= SwitchScreen(screen=11,!same);
	};
	interpret 0x1008fe0c+AnyOfOrNone(all) {
		repeat= True;
		action= SwitchScreen(screen=12,!same);
	};
	interpret 0x1008fe25+AnyOfOrNone(all) {
		repeat= True;
		action= Private(type=0x86,data[0]=0x50,data[1]=0x72,data[2]=0x47,data[3]=0x72,data[4]=0x62,data[5]=0x73,data[6]=0x00);
	};
	interpret 0x1008fe24+AnyOfOrNone(all) {
		repeat= True;
		action= Private(type=0x86,data[0]=0x50,data[1]=0x72,data[2]=0x57,data[3]=0x69,data[4]=0x6e,data[5]=0x73,data[6]=0x00);
	};
	interpret 0x1008fe22+AnyOfOrNone(all) {
		repeat= True;
		action= Private(type=0x86,data[0]=0x2b,data[1]=0x56,data[2]=0x4d,data[3]=0x6f,data[4]=0x64,data[5]=0x65,data[6]=0x00);
	};
	interpret 0x1008fe23+AnyOfOrNone(all) {
		repeat= True;
		action= Private(type=0x86,data[0]=0x2d,data[1]=0x56,data[2]=0x4d,data[3]=0x6f,data[4]=0x64,data[5]=0x65,data[6]=0x00);
	};
	interpret 0xfe11+AnyOfOrNone(all) {
		action= SetMods(modifiers=LevelFive,clearLocks);
	};
	interpret 0xfe12+AnyOfOrNone(all) {
		action= LatchMods(modifiers=LevelFive,clearLocks,latchToLock);
	};
	interpret 0xfe13+AnyOfOrNone(all) {
		action= LockMods(modifiers=LevelFive);
	};
	interpret 0xffe5+AnyOfOrNone(all) {
		action= LockMods(modifiers=Lock);
	};
	interpret Any+Exactly(Lock) {
		action= LockMods(modifiers=Lock);
	};
	interpret Any+AnyOf(all) {
		action= SetMods(modifiers=modMapMods,clearLocks);
	};
	indicator "Caps Lock" {
		whichModState= locked;
		modifiers= Lock;
	};
	indicator "Num Lock" {
		whichModState= locked;
		modifiers= NumLock;
	};
	indicator "Scroll Lock" {
		whichModState= locked;
		modifiers= ScrollLock;
	};
	indicator "Shift Lock" {
		whichModState= locked;
		modifiers= Shift;
	};
	indicator "Group 2" {
		groups= 0xfe;
	};
	indicator "Mouse Keys" {
		controls= MouseKeys;
	};
};

xkb_symbols "pc_us_pt_2_us_3_inet(evdev)_group(shift_caps_toggle)_compose(ralt)" {
	name[1]="English (US)";
	name[2]="Portuguese";
	name[3]="English (US)";

	key <ESC> {	[ 0xff1b ] };
	key <AE01> {
		type[2]= "FOUR_LEVEL",
		symbols[1]= [ 0x31, 0x21 ],
		symbols[2]= [ 0x31, 0x21, 0xb9, 0xa1 ],
		symbols[3]= [ 0x31, 0x21 ]
	};
	key <AE02> {
		type[2]= "FOUR_LEVEL",
		symbols[1]= [ 0x32, 0x40 ],
		symbols[2]= [ 0x32, 0x22, 0x40, 0xac3 ],
		symbols[3]= [ 0x32, 0x40 ]
	};
	key <AE03> {
		type[2]= "FOUR_LEVEL",
		symbols[1]= [ 0x33, 0x23 ],
		symbols[2]= [ 0x33, 0x23, 0xa3, 0xa3 ],
		symbols[3]= [ 0x33, 0x23 ]
	};
	key <AE04> {
		type[2]= "FOUR_LEVEL",
		symbols[1]= [ 0x34, 0x24 ],
		symbols[2]= [ 0x34, 0x24, 0xa7, 0x24 ],
		symbols[3]= [ 0x34, 0x24 ]
	};
	key <AE05> {
		type[2]= "FOUR_LEVEL",
		symbols[1]= [ 0x35, 0x25 ],
		symbols[2]= [ 0x35, 0x25, 0xbd, 0xac4 ],
		symbols[3]= [ 0x35, 0x25 ]
	};
	key <AE06> {
		type[2]= "FOUR_LEVEL",
		symbols[1]= [ 0x36, 0x5e ],
		symbols[2]= [ 0x36, 0x26, 0xac, 0xac5 ],
		symbols[3]= [ 0x36, 0x5e ]
	};
	key <AE07> {
		type[2]= "FOUR_LEVEL",
		symbols[1]= [ 0x37, 0x26 ],
		symbols[2]= [ 0x37, 0x2f, 0x7b, 0xac6 ],
		symbols[3]= [ 0x37, 0x26 ]
	};
	key <AE08> {
		type[2]= "FOUR_LEVEL",
		symbols[1]= [ 0x38, 0x2a ],
		symbols[2]= [ 0x38, 0x28, 0x5b, 0xac9 ],
		symbols[3]= [ 0x38, 0x2a ]
	};
	key <AE09> {
		type[2]= "FOUR_LEVEL",
		symbols[1]= [ 0x39, 0x28 ],
		symbols[2]= [ 0x39, 0x29, 0x5d, 0xb1 ],
		symbols[3]= [ 0x39, 0x28 ]
	};
	key <AE10> {
		type[2]= "FOUR_LEVEL",
		symbols[1]= [ 0x30, 0x29 ],
		symbols[2]= [ 0x30, 0x3d, 0x7d, 0xb0 ],
		symbols[3]= [ 0x30, 0x29 ]
	};
	key <AE11> {
		type[2]= "FOUR_LEVEL",
		symbols[1]= [ 0x2d, 0x5f ],
		symbols[2]= [ 0x27, 0x3f, 0x5c, 0xbf ],
		symbols[3]= [ 0x2d, 0x5f ]
	};
	key <AE12> {
		type[2]= "FOUR_LEVEL",
		symbols[1]= [ 0x3d, 0x2b ],
		symbols[2]= [ 0xebf, 0xec4, 0xfe5b, 0xfe5c ],
		symbols[3]= [ 0x3d, 0x2b ]
	};
	key <BKSP> {	[ 0xff08, 0xff08 ] };
	key <TAB> {	[ 0xff09, 0xfe20 ] };
	key <AD01> {
		type[1]= "ALPHABETIC",
		type[2]= "FOUR_LEVEL_SEMIALPHABETIC",
		type[3]= "ALPHABETIC",
		symbols[1]= [ 0x71, 0x51 ],
		symbols[2]= [ 0x71, 0x51, 0x40, 0x7d9 ],
		symbols[3]= [ 0x71, 0x51 ]
	};
	key <AD02> {
		type[1]= "ALPHABETIC",
		type[2]= "FOUR_LEVEL_ALPHABETIC",
		type[3]= "ALPHABETIC",
		symbols[1]= [ 0x77, 0x57 ],
		symbols[2]= [ 0x77, 0x57, 0x1b3, 0x1a3 ],
		symbols[3]= [ 0x77, 0x57 ]
	};
	key <AD03> {
		type[1]= "ALPHABETIC",
		type[2]= "FOUR_LEVEL_SEMIALPHABETIC",
		type[3]= "ALPHABETIC",
		symbols[1]= [ 0x65, 0x45 ],
		symbols[2]= [ 0x65, 0x45, 0x20ac, 0xa2 ],
		symbols[3]= [ 0x65, 0x45 ]
	};
	key <AD04> {
		type[1]= "ALPHABETIC",
		type[2]= "FOUR_LEVEL_SEMIALPHABETIC",
		type[3]= "ALPHABETIC",
		symbols[1]= [ 0x72, 0x52 ],
		symbols[2]= [ 0x72, 0x52, 0xb6, 0xae ],
		symbols[3]= [ 0x72, 0x52 ]
	};
	key <AD05> {
		type[1]= "ALPHABETIC",
		type[2]= "FOUR_LEVEL_ALPHABETIC",
		type[3]= "ALPHABETIC",
		symbols[1]= [ 0x74, 0x54 ],
		symbols[2]= [ 0x74, 0x54, 0x3bc, 0x3ac ],
		symbols[3]= [ 0x74, 0x54 ]
	};
	key <AD06> {
		type[1]= "ALPHABETIC",
		type[2]= "FOUR_LEVEL_SEMIALPHABETIC",
		type[3]= "ALPHABETIC",
		symbols[1]= [ 0x79, 0x59 ],
		symbols[2]= [ 0x79, 0x59, 0x8fb, 0xa5 ],
		symbols[3]= [ 0x79, 0x59 ]
	};
	key <AD07> {
		type[1]= "ALPHABETIC",
		type[2]= "FOUR_LEVEL_SEMIALPHABETIC",
		type[3]= "ALPHABETIC",
		symbols[1]= [ 0x75, 0x55 ],
		symbols[2]= [ 0x75, 0x55, 0x8fe, 0x8fc ],
		symbols[3]= [ 0x75, 0x55 ]
	};
	key <AD08> {
		type[1]= "ALPHABETIC",
		type[2]= "FOUR_LEVEL_SEMIALPHABETIC",
		type[3]= "ALPHABETIC",
		symbols[1]= [ 0x69, 0x49 ],
		symbols[2]= [ 0x69, 0x49, 0x8fd, 0x2b9 ],
		symbols[3]= [ 0x69, 0x49 ]
	};
	key <AD09> {
		type[1]= "ALPHABETIC",
		type[2]= "FOUR_LEVEL_ALPHABETIC",
		type[3]= "ALPHABETIC",
		symbols[1]= [ 0x6f, 0x4f ],
		symbols[2]= [ 0x6f, 0x4f, 0xf8, 0xd8 ],
		symbols[3]= [ 0x6f, 0x4f ]
	};
	key <AD10> {
		type[1]= "ALPHABETIC",
		type[2]= "FOUR_LEVEL_ALPHABETIC",
		type[3]= "ALPHABETIC",
		symbols[1]= [ 0x70, 0x50 ],
		symbols[2]= [ 0x70, 0x50, 0xfe, 0xde ],
		symbols[3]= [ 0x70, 0x50 ]
	};
	key <AD11> {
		type[2]= "FOUR_LEVEL",
		symbols[1]= [ 0x5b, 0x7b ],
		symbols[2]= [ 0x2b, 0x2a, 0xfe57, 0xfe58 ],
		symbols[3]= [ 0x5b, 0x7b ]
	};
	key <AD12> {
		type[2]= "FOUR_LEVEL",
		symbols[1]= [ 0x5d, 0x7d ],
		symbols[2]= [ 0xfe51, 0xfe50, 0xfe53, 0xfe54 ],
		symbols[3]= [ 0x5d, 0x7d ]
	};
	key <RTRN> {	[ 0xff0d ] };
	key <LCTL> {	[ 0xffe3 ] };
	key <AC01> {
		type[1]= "ALPHABETIC",
		type[2]= "FOUR_LEVEL_ALPHABETIC",
		type[3]= "ALPHABETIC",
		symbols[1]= [ 0x61, 0x41 ],
		symbols[2]= [ 0x61, 0x41, 0xe6, 0xc6 ],
		symbols[3]= [ 0x61, 0x41 ]
	};
	key <AC02> {
		type[1]= "ALPHABETIC",
		type[2]= "FOUR_LEVEL_SEMIALPHABETIC",
		type[3]= "ALPHABETIC",
		symbols[1]= [ 0x73, 0x53 ],
		symbols[2]= [ 0x73, 0x53, 0xdf, 0xa7 ],
		symbols[3]= [ 0x73, 0x53 ]
	};
	key <AC03> {
		type[1]= "ALPHABETIC",
		type[2]= "FOUR_LEVEL_ALPHABETIC",
		type[3]= "ALPHABETIC",
		symbols[1]= [ 0x64, 0x44 ],
		symbols[2]= [ 0x64, 0x44, 0xf0, 0xd0 ],
		symbols[3]= [ 0x64, 0x44 ]
	};
	key <AC04> {
		type[1]= "ALPHABETIC",
		type[2]= "FOUR_LEVEL_SEMIALPHABETIC",
		type[3]= "ALPHABETIC",
		symbols[1]= [ 0x66, 0x46 ],
		symbols[2]= [ 0x66, 0x46, 0x1f0, 0xaa ],
		symbols[3]= [ 0x66, 0x46 ]
	};
	key <AC05> {
		type[1]= "ALPHABETIC",
		type[2]= "FOUR_LEVEL_ALPHABETIC",
		type[3]= "ALPHABETIC",
		symbols[1]= [ 0x67, 0x47 ],
		symbols[2]= [ 0x67, 0x47, 0x3bf, 0x3bd ],
		symbols[3]= [ 0x67, 0x47 ]
	};
	key <AC06> {
		type[1]= "ALPHABETIC",
		type[2]= "FOUR_LEVEL_ALPHABETIC",
		type[3]= "ALPHABETIC",
		symbols[1]= [ 0x68, 0x48 ],
		symbols[2]= [ 0x68, 0x48, 0x2b1, 0x2a1 ],
		symbols[3]= [ 0x68, 0x48 ]
	};
	key <AC07> {
		type[1]= "ALPHABETIC",
		type[2]= "FOUR_LEVEL_SEMIALPHABETIC",
		type[3]= "ALPHABETIC",
		symbols[1]= [ 0x6a, 0x4a ],
		symbols[2]= [ 0x6a, 0x4a, 0xfe61, 0xfe62 ],
		symbols[3]= [ 0x6a, 0x4a ]
	};
	key <AC08> {
		type[1]= "ALPHABETIC",
		type[2]= "FOUR_LEVEL_SEMIALPHABETIC",
		type[3]= "ALPHABETIC",
		symbols[1]= [ 0x6b, 0x4b ],
		symbols[2]= [ 0x6b, 0x4b, 0x3a2, 0x26 ],
		symbols[3]= [ 0x6b, 0x4b ]
	};
	key <AC09> {
		type[1]= "ALPHABETIC",
		type[2]= "FOUR_LEVEL_ALPHABETIC",
		type[3]= "ALPHABETIC",
		symbols[1]= [ 0x6c, 0x4c ],
		symbols[2]= [ 0x6c, 0x4c, 0x1b3, 0x1a3 ],
		symbols[3]= [ 0x6c, 0x4c ]
	};
	key <AC10> {
		type[2]= "FOUR_LEVEL_SEMIALPHABETIC",
		symbols[1]= [ 0x3b, 0x3a ],
		symbols[2]= [ 0xe7, 0xc7, 0xfe51, 0xfe59 ],
		symbols[3]= [ 0x3b, 0x3a ]
	};
	key <AC11> {
		type[2]= "FOUR_LEVEL",
		symbols[1]= [ 0x27, 0x22 ],
		symbols[2]= [ 0xec7, 0xaa, 0xfe52, 0xfe5a ],
		symbols[3]= [ 0x27, 0x22 ]
	};
	key <TLDE> {
		type[2]= "FOUR_LEVEL",
		symbols[1]= [ 0x60, 0x7e ],
		symbols[2]= [ 0x5c, 0x7c, 0xac, 0xac ],
		symbols[3]= [ 0x60, 0x7e ]
	};
	key <LFSH> {	[ 0xffe1 ] };
	key <BKSL> {
		type[2]= "FOUR_LEVEL",
		symbols[1]= [ 0x5c, 0x7c ],
		symbols[2]= [ 0xfe53, 0xfe52, 0xfe50, 0xfe55 ],
		symbols[3]= [ 0x5c, 0x7c ]
	};
	key <AB01> {
		type[1]= "ALPHABETIC",
		type[2]= "FOUR_LEVEL_SEMIALPHABETIC",
		type[3]= "ALPHABETIC",
		symbols[1]= [ 0x7a, 0x5a ],
		symbols[2]= [ 0x7a, 0x5a, 0xebf, 0x3c ],
		symbols[3]= [ 0x7a, 0x5a ]
	};
	key <AB02> {
		type[1]= "ALPHABETIC",
		type[2]= "FOUR_LEVEL_SEMIALPHABETIC",
		type[3]= "ALPHABETIC",
		symbols[1]= [ 0x78, 0x58 ],
		symbols[2]= [ 0x78, 0x58, 0xec4, 0x3e ],
		symbols[3]= [ 0x78, 0x58 ]
	};
	key <AB03> {
		type[1]= "ALPHABETIC",
		type[2]= "FOUR_LEVEL_SEMIALPHABETIC",
		type[3]= "ALPHABETIC",
		symbols[1]= [ 0x63, 0x43 ],
		symbols[2]= [ 0x63, 0x43, 0xa2, 0xa9 ],
		symbols[3]= [ 0x63, 0x43 ]
	};
	key <AB04> {
		type[1]= "ALPHABETIC",
		type[2]= "FOUR_LEVEL_SEMIALPHABETIC",
		type[3]= "ALPHABETIC",
		symbols[1]= [ 0x76, 0x56 ],
		symbols[2]= [ 0x76, 0x56, 0xad2, 0xad0 ],
		symbols[3]= [ 0x76, 0x56 ]
	};
	key <AB05> {
		type[1]= "ALPHABETIC",
		type[2]= "FOUR_LEVEL_SEMIALPHABETIC",
		type[3]= "ALPHABETIC",
		symbols[1]= [ 0x62, 0x42 ],
		symbols[2]= [ 0x62, 0x42, 0xad3, 0xad1 ],
		symbols[3]= [ 0x62, 0x42 ]
	};
	key <AB06> {
		type[1]= "ALPHABETIC",
		type[2]= "FOUR_LEVEL_ALPHABETIC",
		type[3]= "ALPHABETIC",
		symbols[1]= [ 0x6e, 0x4e ],
		symbols[2]= [ 0x6e, 0x4e, 0x6e, 0x4e ],
		symbols[3]= [ 0x6e, 0x4e ]
	};
	key <AB07> {
		type[1]= "ALPHABETIC",
		type[2]= "FOUR_LEVEL_SEMIALPHABETIC",
		type[3]= "ALPHABETIC",
		symbols[1]= [ 0x6d, 0x4d ],
		symbols[2]= [ 0x6d, 0x4d, 0xb5, 0xec7 ],
		symbols[3]= [ 0x6d, 0x4d ]
	};
	key <AB08> {
		type[2]= "FOUR_LEVEL",
		symbols[1]= [ 0x2c, 0x3c ],
		symbols[2]= [ 0x2c, 0x3b, 0x8a3, 0xd7 ],
		symbols[3]= [ 0x2c, 0x3c ]
	};
	key <AB09> {
		type[2]= "FOUR_LEVEL",
		symbols[1]= [ 0x2e, 0x3e ],
		symbols[2]= [ 0x2e, 0x3a, 0xb7, 0xf7 ],
		symbols[3]= [ 0x2e, 0x3e ]
	};
	key <AB10> {
		type[2]= "FOUR_LEVEL",
		symbols[1]= [ 0x2f, 0x3f ],
		symbols[2]= [ 0x2d, 0x5f, 0xfe60, 0xfe56 ],
		symbols[3]= [ 0x2f, 0x3f ]
	};
	key <RTSH> {	[ 0xffe2 ] };
	key <KPMU> {
		type= "CTRL+ALT",
		symbols[1]= [ 0xffaa, 0xffaa, 0xffaa, 0xffaa, 0x1008fe21 ]
	};
	key <LALT> {	[ 0xffe9, 0xffe7 ] };
	key <SPCE> {	[ 0x20 ] };
	key <CAPS> {	[ 0xffe5, 0xfe08 ] };
	key <FK01> {
		type= "CTRL+ALT",
		symbols[1]= [ 0xffbe, 0xffbe, 0xffbe, 0xffbe, 0x1008fe01 ]
	};
	key <FK02> {
		type= "CTRL+ALT",
		symbols[1]= [ 0xffbf, 0xffbf, 0xffbf, 0xffbf, 0x1008fe02 ]
	};
	key <FK03> {
		type= "CTRL+ALT",
		symbols[1]= [ 0xffc0, 0xffc0, 0xffc0, 0xffc0, 0x1008fe03 ]
	};
	key <FK04> {
		type= "CTRL+ALT",
		symbols[1]= [ 0xffc1, 0xffc1, 0xffc1, 0xffc1, 0x1008fe04 ]
	};
	key <FK05> {
		type= "CTRL+ALT",
		symbols[1]= [ 0xffc2, 0xffc2, 0xffc2, 0xffc2, 0x1008fe05 ]
	};
	key <FK06> {
		type= "CTRL+ALT",
		symbols[1]= [ 0xffc3, 0xffc3, 0xffc3, 0xffc3, 0x1008fe06 ]
	};
	key <FK07> {
		type= "CTRL+ALT",
		symbols[1]= [ 0xffc4, 0xffc4, 0xffc4, 0xffc4, 0x1008fe07 ]
	};
	key <FK08> {
		type= "CTRL+ALT",
		symbols[1]= [ 0xffc5, 0xffc5, 0xffc5, 0xffc5, 0x1008fe08 ]
	};
	key <FK09> {
		type= "CTRL+ALT",
		symbols[1]= [ 0xffc6, 0xffc6, 0xffc6, 0xffc6, 0x1008fe09 ]
	};
	key <FK10> {
		type= "CTRL+ALT",
		symbols[1]= [ 0xffc7, 0xffc7, 0xffc7, 0xffc7, 0x1008fe0a ]
	};
	key <NMLK> {	[ 0xff7f ] };
	key <SCLK> {	[ 0xff14 ] };
	key <KP7> {	[ 0xff95, 0xffb7 ] };
	key <KP8> {	[ 0xff97, 0xffb8 ] };
	key <KP9> {	[ 0xff9a, 0xffb9 ] };
	key <KPSU> {
		type= "CTRL+ALT",
		symbols[1]= [ 0xffad, 0xffad, 0xffad, 0xffad, 0x1008fe23 ]
	};
	key <KP4> {	[ 0xff96, 0xffb4 ] };
	key <KP5> {	[ 0xff9d, 0xffb5 ] };
	key <KP6> {	[ 0xff98, 0xffb6 ] };
	key <KPAD> {
		type= "CTRL+ALT",
		symbols[1]= [ 0xffab, 0xffab, 0xffab, 0xffab, 0x1008fe22 ]
	};
	key <KP1> {	[ 0xff9c, 0xffb1 ] };
	key <KP2> {	[ 0xff99, 0xffb2 ] };
	key <KP3> {	[ 0xff9b, 0xffb3 ] };
	key <KP0> {	[ 0xff9e, 0xffb0 ] };
	key <KPDL> {	[ 0xff9f, 0xffae ] };
	key <LVL3> {
		type= "ONE_LEVEL",
		symbols[1]= [ 0xfe03 ]
	};
	key <LSGT> {
		type= "FOUR_LEVEL",
		symbols[1]= [ 0x3c, 0x3e, 0x7c, 0xa6 ],
		symbols[2]= [ 0x3c, 0x3e, 0x5c, 0x5c ]
	};
	key <FK11> {
		type= "CTRL+ALT",
		symbols[1]= [ 0xffc8, 0xffc8, 0xffc8, 0xffc8, 0x1008fe0b ]
	};
	key <FK12> {
		type= "CTRL+ALT",
		symbols[1]= [ 0xffc9, 0xffc9, 0xffc9, 0xffc9, 0x1008fe0c ]
	};
	key <KATA> {	[ 0xff26 ] };
	key <HIRA> {	[ 0xff25 ] };
	key <HENK> {	[ 0xff23 ] };
	key <HKTG> {	[ 0xff27 ] };
	key <MUHE> {	[ 0xff22 ] };
	key <KPEN> {	[ 0xff8d ] };
	key <RCTL> {	[ 0xffe4 ] };
	key <KPDV> {
		type= "CTRL+ALT",
		symbols[1]= [ 0xffaf, 0xffaf, 0xffaf, 0xffaf, 0x1008fe20 ]
	};
	key <PRSC> {
		type= "PC_ALT_LEVEL2",
		symbols[1]= [ 0xff61, 0xff15 ]
	};
	key <RALT> {
		type[1]= "TWO_LEVEL",
		type[2]= "ONE_LEVEL",
		symbols[1]= [ 0xff20, 0xff20 ],
		symbols[2]= [ 0xfe03 ]
	};
	key <LNFD> {	[ 0xff0a ] };
	key <HOME> {	[ 0xff50 ] };
	key <UP> {	[ 0xff52 ] };
	key <PGUP> {	[ 0xff55 ] };
	key <LEFT> {	[ 0xff51 ] };
	key <RGHT> {	[ 0xff53 ] };
	key <END> {	[ 0xff57 ] };
	key <DOWN> {	[ 0xff54 ] };
	key <PGDN> {	[ 0xff56 ] };
	key <INS> {	[ 0xff63 ] };
	key <DELE> {	[ 0xffff ] };
	key <MUTE> {	[ 0x1008ff12 ] };
	key <VOL-> {	[ 0x1008ff11 ] };
	key <VOL+> {	[ 0x1008ff13 ] };
	key <POWR> {	[ 0x1008ff2a ] };
	key <KPEQ> {	[ 0xffbd ] };
	key <I126> {	[ 0xb1 ] };
	key <PAUS> {
		type= "PC_CONTROL_LEVEL2",
		symbols[1]= [ 0xff13, 0xff6b ]
	};
	key <I128> {	[ 0x1008ff4a ] };
	key <I129> {	[ 0xffae, 0xffae ] };
	key <HNGL> {	[ 0xff31 ] };
	key <HJCV> {	[ 0xff34 ] };
	key <LWIN> {	[ 0xffeb ] };
	key <RWIN> {	[ 0xffec ] };
	key <COMP> {	[ 0xff67 ] };
	key <STOP> {	[ 0xff69 ] };
	key <AGAI> {	[ 0xff66 ] };
	key <PROP> {	[ 0x1005ff70 ] };
	key <UNDO> {	[ 0xff65 ] };
	key <FRNT> {	[ 0x1005ff71 ] };
	key <COPY> {	[ 0x1008ff57 ] };
	key <OPEN> {	[ 0x1008ff6b ] };
	key <PAST> {	[ 0x1008ff6d ] };
	key <FIND> {	[ 0xff68 ] };
	key <CUT> {	[ 0x1008ff58 ] };
	key <HELP> {	[ 0xff6a ] };
	key <I147> {	[ 0x1008ff65 ] };
	key <I148> {	[ 0x1008ff1d ] };
	key <I150> {	[ 0x1008ff2f ] };
	key <I151> {	[ 0x1008ff2b ] };
	key <I152> {	[ 0x1008ff5d ] };
	key <I153> {	[ 0x1008ff7b ] };
	key <I155> {	[ 0x1008ff8a ] };
	key <I156> {	[ 0x1008ff41 ] };
	key <I157> {	[ 0x1008ff42 ] };
	key <I158> {	[ 0x1008ff2e ] };
	key <I159> {	[ 0x1008ff5a ] };
	key <I160> {	[ 0x1008ff2d ] };
	key <I161> {	[ 0x1008ff74 ] };
	key <I162> {	[ 0x1008ff7f ] };
	key <I163> {	[ 0x1008ff19 ] };
	key <I164> {	[ 0x1008ff30 ] };
	key <I165> {	[ 0x1008ff33 ] };
	key <I166> {	[ 0x1008ff26 ] };
	key <I167> {	[ 0x1008ff27 ] };
	key <I169> {	[ 0x1008ff2c ] };
	key <I170> {	[ 0x1008ff2c, 0x1008ff2c ] };
	key <I171> {	[ 0x1008ff17 ] };
	key <I172> {	[ 0x1008ff14, 0x1008ff31 ] };
	key <I173> {	[ 0x1008ff16 ] };
	key <I174> {	[ 0x1008ff15, 0x1008ff2c ] };
	key <I175> {	[ 0x1008ff1c ] };
	key <I176> {	[ 0x1008ff3e ] };
	key <I177> {	[ 0x1008ff6e ] };
	key <I179> {	[ 0x1008ff81 ] };
	key <I180> {	[ 0x1008ff18 ] };
	key <I181> {	[ 0x1008ff73 ] };
	key <I182> {	[ 0x1008ff56 ] };
	key <I185> {	[ 0x1008ff78 ] };
	key <I186> {	[ 0x1008ff79 ] };
	key <I187> {	[ 0x28 ] };
	key <I188> {	[ 0x29 ] };
	key <I189> {	[ 0x1008ff68 ] };
	key <I190> {	[ 0xff66 ] };
	key <FK13> {	[ 0x1008ff81 ] };
	key <FK14> {	[ 0x1008ff45 ] };
	key <FK15> {	[ 0x1008ff46 ] };
	key <FK16> {	[ 0x1008ff47 ] };
	key <FK17> {	[ 0x1008ff48 ] };
	key <FK18> {	[ 0x1008ff49 ] };
	key <FK20> {	[ 0x1008ffb2 ] };
	key <FK21> {	[ 0x1008ffa9 ] };
	key <FK22> {	[ 0x1008ffb0 ] };
	key <FK23> {	[ 0x1008ffb1 ] };
	key <MDSW> {	[ 0xff7e ] };
	key <ALT> {	[ NoSymbol, 0xffe9 ] };
	key <META> {	[ NoSymbol, 0xffe7 ] };
	key <SUPR> {	[ NoSymbol, 0xffeb ] };
	key <HYPR> {	[ NoSymbol, 0xffed ] };
	key <I208> {	[ 0x1008ff14 ] };
	key <I209> {	[ 0x1008ff31 ] };
	key <I210> {	[ 0x1008ff43 ] };
	key <I211> {	[ 0x1008ff44 ] };
	key <I212> {	[ 0x1008ff4b ] };
	key <I213> {	[ 0x1008ffa7 ] };
	key <I214> {	[ 0x1008ff56 ] };
	key <I215> {	[ 0x1008ff14 ] };
	key <I216> {	[ 0x1008ff97 ] };
	key <I218> {	[ 0xff61 ] };
	key <I220> {	[ 0x1008ff8f ] };
	key <I223> {	[ 0x1008ff19 ] };
	key <I224> {	[ 0x1008ff8e ] };
	key <I225> {	[ 0x1008ff1b ] };
	key <I226> {	[ 0x1008ff5f ] };
	key <I227> {	[ 0x1008ff3c ] };
	key <I228> {	[ 0x1008ff5e ] };
	key <I229> {	[ 0x1008ff36 ] };
	key <I231> {	[ 0xff69 ] };
	key <I232> {	[ 0x1008ff03 ] };
	key <I233> {	[ 0x1008ff02 ] };
	key <I234> {	[ 0x1008ff32 ] };
	key <I235> {	[ 0x1008ff59 ] };
	key <I236> {	[ 0x1008ff04 ] };
	key <I237> {	[ 0x1008ff06 ] };
	key <I238> {	[ 0x1008ff05 ] };
	key <I239> {	[ 0x1008ff7b ] };
	key <I240> {	[ 0x1008ff72 ] };
	key <I241> {	[ 0x1008ff90 ] };
	key <I242> {	[ 0x1008ff77 ] };
	key <I243> {	[ 0x1008ff5b ] };
	key <I244> {	[ 0x1008ff93 ] };
	key <I245> {	[ 0x1008ff94 ] };
	key <I246> {	[ 0x1008ff95 ] };
	key <I247> {
		repeat= Yes,
		symbols[1]= [ NoSymbol ],
		actions[1]= [       SetMods(modifiers=Shift) ]
	};
	modifier_map Shift { <LFSH>, <RTSH> };
	modifier_map Lock { <CAPS> };
	modifier_map Control { <LCTL>, <RCTL> };
	modifier_map Mod1 { <LALT>, <META> };
	modifier_map Mod2 { <NMLK> };
	modifier_map Mod4 { <LWIN>, <RWIN>, <SUPR>, <HYPR> };
	modifier_map Mod5 { <LVL3>, <MDSW> };
};

};
